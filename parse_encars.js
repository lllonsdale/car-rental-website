const https = require('https');
const fs = require('fs');
const path = require('path');
const { URL } = require('url');

// –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
const headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
    'Accept-Encoding': 'gzip, deflate, br',
    'DNT': '1',
    'Connection': 'keep-alive',
    'Upgrade-Insecure-Requests': '1'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function fetchPage(url) {
    return new Promise((resolve, reject) => {
        const options = {
            headers: headers,
            timeout: 10000
        };

        https.get(url, options, (res) => {
            let data = '';

            res.on('data', (chunk) => {
                data += chunk;
            });

            res.on('end', () => {
                if (res.statusCode === 200) {
                    resolve(data);
                } else {
                    reject(new Error(`HTTP ${res.statusCode}: ${res.statusMessage}`));
                }
            });
        }).on('error', (err) => {
            reject(err);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function downloadImage(url, filepath) {
    return new Promise((resolve, reject) => {
        const file = fs.createWriteStream(filepath);
        
        https.get(url, { headers }, (response) => {
            if (response.statusCode !== 200) {
                reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));
                return;
            }

            response.pipe(file);

            file.on('finish', () => {
                file.close();
                resolve(filepath);
            });

            file.on('error', (err) => {
                fs.unlink(filepath, () => {}); // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
                reject(err);
            });
        }).on('error', (err) => {
            reject(err);
        });
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
function ensureDirectoryExists(dirPath) {
    if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π
async function parseMainPage() {
    console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã encars.com.ru...');
    
    try {
        const html = await fetchPage('https://encars.com.ru/');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        const modelLinks = [];
        const regex = /href="https:\/\/encars\.com\.ru\/([^"]+\/[^"]+)">([^<]+)</g;
        let match;
        
        while ((match = regex.exec(html)) !== null) {
            const [, path, name] = match;
            if (path.includes('/') && !path.includes('?') && name.trim()) {
                modelLinks.push({
                    url: `https://encars.com.ru/${path}`,
                    name: name.trim(),
                    path: path
                });
            }
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
        const targetBrands = ['bmw', 'mercedes', 'audi', 'porsche', 'lexus', 'toyota', 'hyundai', 'kia', 'volvo', 'jaguar', 'land-rover', 'mazda'];
        const filteredLinks = modelLinks.filter(link => 
            targetBrands.some(brand => link.path.toLowerCase().includes(brand))
        );
        
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${filteredLinks.length} –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π`);
        return filteredLinks.slice(0, 50); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –Ω–∞—á–∞–ª–∞
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
        return [];
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function parseModelPage(modelUrl, modelName) {
    try {
        console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${modelName}`);
        
        const html = await fetchPage(modelUrl);
        const images = [];
        
        // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        const imageRegex = /src="([^"]*(?:jpg|jpeg|png|webp)[^"]*)"/gi;
        let match;
        
        while ((match = imageRegex.exec(html)) !== null) {
            const imageUrl = match[1];
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã, –∏–∫–æ–Ω–∫–∏ –∏ –ø—Ä–æ—á–∏–µ –º–µ–ª–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (imageUrl.includes('logo') || imageUrl.includes('icon') || 
                imageUrl.includes('flag') || imageUrl.includes('avatar') ||
                imageUrl.width < 200 || imageUrl.height < 200) {
                continue;
            }
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
            let fullImageUrl = imageUrl;
            if (imageUrl.startsWith('//')) {
                fullImageUrl = 'https:' + imageUrl;
            } else if (imageUrl.startsWith('/')) {
                fullImageUrl = 'https://encars.com.ru' + imageUrl;
            }
            
            if (fullImageUrl.startsWith('http')) {
                images.push(fullImageUrl);
            }
        }
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 4
        const uniqueImages = [...new Set(images)].slice(0, 4);
        
        return {
            name: modelName,
            url: modelUrl,
            images: uniqueImages
        };
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${modelName}:`, error.message);
        return { name: modelName, url: modelUrl, images: [] };
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
async function main() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ encars.com.ru...\n');
    
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    let currentCars = [];
    try {
        const carsData = fs.readFileSync('data/cars.json', 'utf8');
        currentCars = JSON.parse(carsData);
        console.log(`üìä –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ${currentCars.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n`);
    } catch (error) {
        console.log('üìä –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π\n');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π —Å —Å–∞–π—Ç–∞
    const models = await parseMainPage();
    
    if (models.length === 0) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π');
        return;
    }
    
    console.log('\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:');
    models.forEach((model, index) => {
        console.log(`${index + 1}. ${model.name}`);
    });
    
    // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const results = [];
    for (let i = 0; i < Math.min(models.length, 10); i++) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const model = models[i];
        const result = await parseModelPage(model.url, model.name);
        results.push(result);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüì∏ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:');
    results.forEach((result, index) => {
        console.log(`${index + 1}. ${result.name}: ${result.images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
        result.images.forEach((img, imgIndex) => {
            console.log(`   ${imgIndex + 1}. ${img}`);
        });
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    const outputData = {
        timestamp: new Date().toISOString(),
        totalModels: results.length,
        models: results
    };
    
    fs.writeFileSync('encars_parsed_data.json', JSON.stringify(outputData, null, 2), 'utf8');
    console.log('\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ encars_parsed_data.json');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { parseMainPage, parseModelPage, downloadImage };