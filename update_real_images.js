const fs = require('fs');
const path = require('path');

function updateCarImagePaths() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Ä–µ–∞–ª—å–Ω–æ —Å–∫–∞—á–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º...\n');
    
    // –ß–∏—Ç–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    let cars = [];
    try {
        const data = fs.readFileSync('data/cars.json', 'utf8');
        cars = JSON.parse(data);
        console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${cars.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const imageFiles = {};
    const brandFolders = ['bmw', 'mercedes-benz', 'audi', 'porsche', 'lexus', 'toyota', 'hyundai', 'kia', 'volvo', 'jaguar', 'land-rover', 'mazda'];
    
    brandFolders.forEach(brandFolder => {
        const brandPath = `images/${brandFolder}`;
        if (fs.existsSync(brandPath)) {
            const files = fs.readdirSync(brandPath).filter(file => file.endsWith('.jpg'));
            imageFiles[brandFolder] = files;
            console.log(`üìÅ ${brandFolder}: ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
        }
    });
    
    let updatedCars = 0;
    let carsWithImages = 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    cars.forEach(car => {
        const brandFolder = car.brand.toLowerCase().replace(/\s+/g, '-');
        const modelName = car.model.toLowerCase().replace(/\s+/g, '_').replace(/[()]/g, '');
        const year = car.year;
        
        // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const carImages = [];
        const angles = ['side', 'front', 'rear', 'interior'];
        
        if (imageFiles[brandFolder]) {
            angles.forEach(angle => {
                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤
                const possibleNames = [
                    `${modelName}_${year}_${angle}.jpg`,
                    `${modelName.replace(/_/g, '-')}_${year}_${angle}.jpg`,
                    `${car.model.toLowerCase().replace(/\s+/g, '-')}_${year}_${angle}.jpg`,
                    `${car.model.toLowerCase().replace(/\s+/g, '')}_${year}_${angle}.jpg`
                ];
                
                for (const fileName of possibleNames) {
                    if (imageFiles[brandFolder].includes(fileName)) {
                        carImages.push(`images/${brandFolder}/${fileName}`);
                        break;
                    }
                }
            });
        }
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏
        if (carImages.length > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–µ—Ä–≤–æ–µ - –æ–±—ã—á–Ω–æ side)
            car.image = carImages[0];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            car.images = carImages;
            
            // –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –¥–æ–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–º
            while (car.images.length < 4) {
                car.images.push(car.images[0]);
            }
            
            carsWithImages++;
            console.log(`‚úÖ ${car.brand} ${car.model} ${car.year}: ${carImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
        } else {
            // –°–æ–∑–¥–∞–µ–º –ø—É—Ç–∏ –¥–ª—è placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            car.image = `images/${brandFolder}/${modelName}_${year}_side.jpg`;
            car.images = [
                `images/${brandFolder}/${modelName}_${year}_side.jpg`,
                `images/${brandFolder}/${modelName}_${year}_front.jpg`,
                `images/${brandFolder}/${modelName}_${year}_rear.jpg`,
                `images/${brandFolder}/${modelName}_${year}_interior.jpg`
            ];
            console.log(`‚ö†Ô∏è  ${car.brand} ${car.model} ${car.year}: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è placeholder –ø—É—Ç–∏`);
        }
        
        updatedCars++;
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try {
        fs.writeFileSync('data/cars.json', JSON.stringify(cars, null, 2), 'utf8');
        console.log(`\nüíæ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
        return;
    }
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`);
    console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${cars.length}`);
    console.log(`   ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updatedCars}`);
    console.log(`   ‚Ä¢ –° —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${carsWithImages}`);
    console.log(`   ‚Ä¢ –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${updatedCars - carsWithImages}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:`);
    const testCars = cars.slice(0, 5);
    testCars.forEach(car => {
        console.log(`   ${car.brand} ${car.model}: ${car.image}`);
        console.log(`     –ú–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${car.images.length} —Ñ–∞–π–ª–æ–≤`);
    });
    
    console.log(`\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
}

if (require.main === module) {
    updateCarImagePaths();
}

module.exports = { updateCarImagePaths };